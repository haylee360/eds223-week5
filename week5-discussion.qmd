---
title: "Week 5 Discussion"
author: "Haylee Oyler"
format: html
editor: source
execute:
  warning: false
  message: false
editor_options: 
  chunk_output_type: console
---

# 2. Get started
```{r}
# Load packages
library(tidyverse)
library(sf)
library(terra)
library(spData)
library(spDataLarge)
```

```{r}
# Load raster data representing grain sizes with the three classes clay, silt and sand
grain <- terra::rast(system.file("raster/grain.tif", package = "spData"))
```

# 3. Your task
```{r}
# Filter to greater than 3100m
nz_height <- nz_height
subset <- nz_height %>% 
  filter(elevation > 3100)

# Create a template raster
template <- rast(terra::ext(subset), 
                    resolution = 3000, 
                    crs = terra::crs(subset))

```


```{r}
# Convert vector points to raster data
# Function "length" returns a count of the elevation points per cell
nz_raster <- rasterize(subset, template, field = "elevation", fun = "length")

plot(nz_raster, main = "Number of Elevation Points > 3100 in Each Grid Cell")
plot(st_geometry(subset), add = TRUE)
```
Rast creates the template, rasterize applies the template


## Find maximum value per grid cells
```{r}
# function "max" returns maximum elevation value per cell
nz_raster2 <- rasterize(subset, template, field = "elevation", fun = max)

plot(nz_raster2, main = "Maximum Elevation in Each Grid Cell ")
plot(st_geometry(subset), add = TRUE)
```

## Aggregate and resample raster
```{r}
# Reduce the resolution by combining 2 cells in each direction into larger cells
# Sum the values of all cells for the resulting elevation value
nz_raster_low <- aggregate(nz_raster, fact = 2, fun = sum, na.rm = TRUE)

# Convert the new raster's resolution back to the 3kmx3km resolution of original raster
nz_resample <- resample(nz_raster_low, nz_raster)

plots <- c(nz_raster, nz_resample)
labs <- c("Original 6 x 6 km", "Resample 6 x 6 km")
plot(plots, main = labs)
```

```{r}
plot(nz_raster_low, main = "Resample 3 x 3 km")
```

## Vectorize raster
```{r}
# Convert raster data to polygon vector data
grain_poly <- as.polygons(grain) %>% 
  st_as_sf()

plot(grain, main = "Grain (Raster)")
```

```{r}
plot(grain_poly, main = "Grain (Vector)")
```

```{r}
# Subset polygons to only clay
clay <- grain_poly %>% 
  dplyr::filter(grain == "clay")

plot(clay, main = "Clay")
```

